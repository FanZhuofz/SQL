SELECT fun1(3,price) FROM titles;

SELECT au_id,au_ord FROM titleauthor;

SELECT au.au_id,ti.au_ord FROM AUTHORS au,titleauthor ti;

-- ----------------查所有作者主编次数和辅编次数----------------------------------------
SELECT au_id,fun1(au_id,1) AS ONE ,fun1(au_id,2) AS two FROM AUTHORS

SELECT COUNT(1) FROM titleauthor WHERE au_id='' AND au_ord=1;

-- ------------找出某一本书在所有图书销量里排第几位-----------------------------------
SET @n=0;
SELECT xh FROM(
  SELECT @n:=@n+1 AS xh,title_id, qty FROM (
    SELECT title_id ,SUM(qty) AS qty FROM sales GROUP BY title_id ORDER BY qty DESC
     ) aa 
 ) bb WHERE title_id='bu1032'


SET @n=0;
  SELECT @n:=@n+1 AS xh,title_id, qty FROM (
    SELECT title_id ,SUM(qty) AS qty FROM sales GROUP BY title_id ORDER BY qty DESC
     ) aa 


SET @a=0;
SELECT @a:=@a+1 AS num,title_id, qty FROM (SELECT title_id ,SUM(qty) AS qty FROM  sales GROUP BY title_id) aa 


SELECT @n:=@n+1 xh,title_id,SUM(qty)  qtySum FROM sales
  GROUP BY title_id ORDER BY SUM(qty)


SET @n:=0;
SELECT xh FROM (SELECT @n:=@n+1 xh,title_id,SUM(qty)  qtySum FROM sales
  GROUP BY title_id ORDER BY SUM(qty)) aa WHERE title_id='bu1032';



SET @n:=0;
SELECT xh FROM (SELECT @n:=@n+1 xh,title_id,SUM(qty)  qtySum FROM sales
  GROUP BY title_id ORDER BY SUM(qty)) aa WHERE title_id='bu1032';


SELECT fun2('bu1032') AS cnt_qty;	-- 调用函数fun2来找出bu1032这本书在所有图书销量里排第几位

SELECT DISTINCT title_id FROM sales WHERE title_id IN(SELECT title_id FROM titles) ORDER BY qty DESC;
 
 
  WHERE title_id='BU1032'
  
  
-- ---------------------触发器--------------------------------------------------------

创建触发器：(例：创建触发器，在t_book表中插入数据时，让t_bookType表中的图书数量加一)
CREATE TRIGGER trig_book AFTER INSERT
  ON t_book FOR EACH ROW
    UPDATE t_bookType set bookNum=bookNum+1 WHERE new.bookTypeId=t_booktype.id;


SELECT NOW(),USER();

  INSERT INTO users VALUES ('users5','444');	-- insert触发器
  
  UPDATE users SET userpwd='123' WHERE username='user2';	-- update触发器
  UPDATE users SET userpwd='123';
  
  DELETE FROM users WHERE username='users1';	-- delete触发器
  DELETE FROM users;
  
  DELETE FROM rizhi;
  
  
-- ---------------------编写还原触发器------------------------------------------------

SELECT * FROM rizhi;

-- 删除还原、修改还原

DELETE FROM users

SELECT MAX(id) FROM rizhi;	-- 获取最后一条数据

DELETE FROM linshi;	-- 清空临时表
INSERT INTO linshi(TIME,author,do1,do2) VALUES(NOW(),USER(),new.username,new.userpwd);	-- 添加记录到linshi表
SELECT do1,do2 FROM rizhi WHERE id IN(SELECT MAX(id) FROM rizhi)	-- 查询最后一条数据（操作）
DELETE FROM linshi WHERE id IN(SELECT MAX(id) FROM linshi)	-- 删除linshi表里最后一条记录
INSERT INTO users VALUES(do1,do2);	-- 将临时表里的数据插入到users表


DELETE FROM linshi;
INSERT INTO linshi(do1,do2) VALUES(SELECT do1,do2 FROM linshi WHERE id IN(SELECT MAX(id) FROM rizhi));






-- ---------------------索引----------------------------------------------------------
-- 1、聚集索引
-- 2、非聚集索引

创建索引
------------------------------------
1、唯一性索引：使用UNIQUE参数可以设置，在创建唯一性索引时，限制该索引的值必须是唯一的；
2、全文索引：使用FULLTEXT参数可以设置，全文索引只能创建在CHAR,VARCHAR,TEXT类型的字段上。主要作用就是提高查询较大字符串类型的速度；只有MyISAM引擎支持该索引，MySQL默认引擎不支持；
3、单列索引：在表中可以给单个字段创建索引，单列索引可以是普通索引，也可以是唯一索引，还可以是全文索引；
4、多列索引：多列索引是在表的多个字段上创建一个索引；
5、空间索引：使用SPATIAL参数可以设置空间索引。空间索引只能建立在空间数据类型上，这样可以提高系统获取空间数据的效率；只有MyISAM引擎支持该索引，MySQL默认引擎不支持。

-- ---创建表的时候创建索引
CREATE TABLE 表名(属性名 数据类型 [完整性约束条件]，
		  属性名 数据类型 [完整性约束条件]
		  ...
		  属性名 数据类型
		  [UNIQUE|FULLTEXT|SPATIAL] INDEX|KEY
		 	[别名](属性名1[(长度)][ASC|DESC])
		 );
--  ---在已存在的表上创建索引--(创建唯一索引)-------------
【CREATE [UNIQUE|FULLTEXT|SPATIAL] INDEX 索引名 ON 表名(属性名[（长度）][ASC|DESC]);】
-- ---用ALTER TABLE语句来创建索引-------------
ALTER TABLE 表名 ADD [UNIQUE|FULLTEXT|SPATIAL] INDEX 索引名 (属性名[(长度)][ASC|DESC]);

-- ---删除索引----------------
DROP INDEX 索引名 ON 表名;
-------------------------------------
DELETE FROM au1

CREATE  TABLE au1
SELECT * FROM AUTHORS WHERE 1=2		-- 创建空表

SELECT COUNT(1) FROM au1;

INSERT INTO au1(au_lname,au_fname,phone,address,city,state,zip,contract)
SELECT au_lname,au_fname,phone,address,city,state,zip,contract FROM au1;


SELECT COUNT(1) FROM AUTHORS WHERE state='ca'

SELECT * FROM au1 WHERE state='ca'

RESET QUERY CACHE	-- 清空缓存

-- 对参与索引的字段不能做运算，否则索引失效【要计算则放在相反方向（如下例）】

SELECT * FROM au1 WHERE au_id='6666'

SELECT * FROM au1 WHERE au_id*1='6666'  -- 运行慢
SELECT * FROM au1 WHERE au_id='6666'*1	-- 运行快


SELECT * FROM au1 WHERE au_id/1='6666'	-- 运行慢
SELECT * FROM au1 WHERE au_id='6666'/1	-- 运行快

UPDATE au1 SET auid = (SELECT au_id FROM AUTHORS WHERE au_id='172-32-1176') WHERE au_id % 2300=1;

